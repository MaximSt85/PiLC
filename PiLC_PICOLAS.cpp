/*----- PROTECTED REGION ID(PiLC_PICOLAS.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        PiLC_PICOLAS.cpp
//
// description : C++ source for the PiLC_PICOLAS class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PiLC_PICOLAS are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <PiLC_PICOLAS.h>
#include <PiLC_PICOLASClass.h>
#include <iostream>

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS.cpp

/**
 *  PiLC_PICOLAS class description:
 *    Class to control PiLC for Strobe lighting
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  External_Trigger_Active    |  Tango::DevShort	Scalar
//  Frequency_divider          |  Tango::DevShort	Scalar
//  Delay                      |  Tango::DevShort	Scalar
//  High_time                  |  Tango::DevLong	Scalar
//  Internal_Generator_Enable  |  Tango::DevBoolean	Scalar
//  Internal_frequency         |  Tango::DevDouble	Scalar
//================================================================

namespace PiLC_PICOLAS_ns
{
/*----- PROTECTED REGION ID(PiLC_PICOLAS::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::PiLC_PICOLAS()
 *	Description : Constructors for a Tango device
 *                implementing the classPiLC_PICOLAS
 */
//--------------------------------------------------------
PiLC_PICOLAS::PiLC_PICOLAS(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::constructor_1
}
//--------------------------------------------------------
PiLC_PICOLAS::PiLC_PICOLAS(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::constructor_2
}
//--------------------------------------------------------
PiLC_PICOLAS::PiLC_PICOLAS(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PiLC_PICOLAS::delete_device()
{
	DEBUG_STREAM << "PiLC_PICOLAS::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::delete_device
	delete[] attr_External_Trigger_Active_read;
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void PiLC_PICOLAS::init_device()
{
	DEBUG_STREAM << "PiLC_PICOLAS::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_External_Trigger_Active_read = new Tango::DevShort[1];
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::init_device) ENABLED START -----*/
	
	//	Initialize device
	try {
		std::cout << "device server is: " << PiLC_PICOLAS::piLCDevice << endl;
		PiLC_PICOLAS::my_device = new Tango::DeviceProxy(PiLC_PICOLAS::piLCDevice);
		/*Tango::DeviceData send_data;
		Tango::DeviceData recieve_data;
		string data;
		send_data << 2;
		recieve_data = PiLC_PICOLAS::my_device->command_inout("ReadFPGA", send_data);
		recieve_data >> data;
		std::cout << "data is: " << data << endl;*/
		set_state(Tango::ON);
		set_status("Device is in ON state");
		PiLC_PICOLAS::frequency = 0.1;
	}
	catch (...) {
		set_state(Tango::OFF);
		set_status("Not able to connect to pilc device: " + PiLC_PICOLAS::piLCDevice);
	}

	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::init_device
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void PiLC_PICOLAS::get_device_property()
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("PiLCDevice"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PiLC_PICOLASClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PiLC_PICOLASClass	*ds_class =
			(static_cast<PiLC_PICOLASClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize PiLCDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  piLCDevice;
		else {
			//	Try to initialize PiLCDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  piLCDevice;
		}
		//	And try to extract PiLCDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  piLCDevice;

	}

	/*----- PROTECTED REGION ID(PiLC_PICOLAS::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PiLC_PICOLAS::always_executed_hook()
{
	DEBUG_STREAM << "PiLC_PICOLAS::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void PiLC_PICOLAS::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PiLC_PICOLAS::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	Tango::DeviceData send_data;
	Tango::DeviceData recieve_data;
	int data;
	//send_data << 2;
	send_data << PiLC_PICOLAS::EXTERNAL_TRIGGER_ACTIVE_REGISTER;
	try {
		if (get_state() != Tango::ON) {
			set_state(Tango::ON);
			set_status("Device is in ON state");
		}
		recieve_data = PiLC_PICOLAS::my_device->command_inout("ReadFPGA", send_data);
		recieve_data >> data;
		//std::cout << "recieve data is: " << data << endl;
		if (data == 1) {
			*attr_External_Trigger_Active_read = 1;
		}
		else {
			*attr_External_Trigger_Active_read = 0;
		}
	}
	catch (...) {
		if (get_state() != Tango::OFF) {
			set_state(Tango::OFF);
			set_status("Not able to read data from pilc device: " + PiLC_PICOLAS::piLCDevice);
		}
	}

	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute External_Trigger_Active related method
 *	Description: Incoming Signal 1, else 0.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::read_External_Trigger_Active(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::read_External_Trigger_Active(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::read_External_Trigger_Active) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_External_Trigger_Active_read);
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::read_External_Trigger_Active
}
//--------------------------------------------------------
/**
 *	Write attribute Frequency_divider related method
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_Frequency_divider(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_Frequency_divider(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_Frequency_divider) ENABLED START -----*/
	const Tango::DevVarLongArray *out;
	Tango::DeviceData din, dout;
	Tango::DevVarLongArray *in = new Tango::DevVarLongArray();
	in->length(2);
	(*in)[0] = PiLC_PICOLAS::FREQUENCY_DIVIDER_REGISTER;
	(*in)[1] = w_val;
	din << in;
	try {
		dout = PiLC_PICOLAS::my_device->command_inout("WriteFPGA", din);
	}
	catch (...) {
		set_status("FREQUENCY_DIVIDER::could not send command");
	}
	//cout << "hello" << endl;
	dout.reset_exceptions(Tango::DeviceData::isempty_flag);
	if (!dout.is_empty()) {
		dout >> out;
		cout << "FREQUENCY_DIVIDER::received value from the device server: " << (*out)[0];
	}
	else {
		cout << "FREQUENCY_DIVIDER::no data read from device server" << endl;
	}
	/*try {
		dout >> out;
		cout << "Received value = " << (*out)[0];
	}
	catch (Tango::DevFailed &e) {
		Tango::Except::print_exception(e);
	}*/
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_Frequency_divider
}
//--------------------------------------------------------
/**
 *	Write attribute Delay related method
 *	Description: Delay from the incoming signal to the output signal, ns
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_Delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_Delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_Delay) ENABLED START -----*/
	if (w_val % 20 != 0) {
		set_status("Delay must be divisible of 20");
		w_val = 20;
		attr.set_write_value(w_val);
	}
	else {
		if (get_status() == "Delay must be divisible of 20") {
			set_status("Device is in ON state");
		}
	}

	w_val = short (w_val / 20);
	const Tango::DevVarLongArray *out;
	Tango::DeviceData din, dout;
	Tango::DevVarLongArray *in = new Tango::DevVarLongArray();
	in->length(2);
	(*in)[0] = PiLC_PICOLAS::DELAY_REGISTER;
	(*in)[1] = w_val;
	din << in;
	try {
		dout = PiLC_PICOLAS::my_device->command_inout("WriteFPGA", din);
	}
	catch (...) {
		set_status("DELAY::could not send command");
	}
	//cout << "hello" << endl;
	dout.reset_exceptions(Tango::DeviceData::isempty_flag);
	if (!dout.is_empty()) {
		dout >> out;
		cout << "DELAY::received value from the device server: " << (*out)[0];
	}
	else {
		cout << "DELAY::no data read from device server" << endl;
	}
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_Delay
}
//--------------------------------------------------------
/**
 *	Write attribute High_time related method
 *	Description: High Time from the Output Signal, ns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_High_time(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_High_time(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_High_time) ENABLED START -----*/
	if (w_val % 20 != 0) {
		set_status("High time must be divisible of 20");
		w_val = 100;
		attr.set_write_value(w_val);
	}
	else {
		if (get_status() == "High time must be divisible of 20") {
			set_status("Device is in ON state");
		}
	}

	if (w_val >= ((1.0/PiLC_PICOLAS::frequency) * 1000000000)) {
		set_status("Pulse width couldn't be bigger than Period");
		w_val = 100;
		attr.set_write_value(w_val);
	}
	else {
		if (get_status() == "Pulse width couldn't be bigger than Period") {
			set_status("Device is in ON state");
		}
	}
	w_val = short (w_val / 20);
	const Tango::DevVarLongArray *out;
	Tango::DeviceData din, dout;
	Tango::DevVarLongArray *in = new Tango::DevVarLongArray();
	in->length(2);
	(*in)[0] = PiLC_PICOLAS::HIGH_TIME_REGISTER;
	(*in)[1] = w_val;
	din << in;
	try {
		dout = PiLC_PICOLAS::my_device->command_inout("WriteFPGA", din);
	}
	catch (...) {
		set_status("HIGH_TIME::could not send command");
	}
	//cout << "hello" << endl;
	dout.reset_exceptions(Tango::DeviceData::isempty_flag);
	if (!dout.is_empty()) {
		dout >> out;
		cout << "HIGH_TIME::received value from the device server: " << (*out)[0];
	}
	else {
		cout << "HIGH_TIME::no data read from device server" << endl;
	}
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_High_time
}
//--------------------------------------------------------
/**
 *	Write attribute Internal_Generator_Enable related method
 *	Description: Internal Frequency generator. false = disable. true = enable
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_Internal_Generator_Enable(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_Internal_Generator_Enable(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_Internal_Generator_Enable) ENABLED START -----*/
	const Tango::DevVarLongArray *out;
	Tango::DeviceData din, dout;
	Tango::DevVarLongArray *in = new Tango::DevVarLongArray();
	in->length(2);
	(*in)[0] = PiLC_PICOLAS::INTERNAL_GENERATOR_ENABLE_REGISTER;
	if (w_val) {
		(*in)[1] = 1;
	}
	else {
		(*in)[1] = 0;
	}
	din << in;
	try {
		dout = PiLC_PICOLAS::my_device->command_inout("WriteFPGA", din);
	}
	catch (...) {
		set_status("INTERNAL_GENERATOR_ENABLE::could not send command");
	}
	//cout << "hello" << endl;
	dout.reset_exceptions(Tango::DeviceData::isempty_flag);
	if (!dout.is_empty()) {
		dout >> out;
		cout << "INTERNAL_GENERATOR_ENABLE::received value from the device server: " << (*out)[0];
	}
	else {
		cout << "INTERNAL_GENERATOR_ENABLE::no data read from device server" << endl;
	}
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_Internal_Generator_Enable
}
//--------------------------------------------------------
/**
 *	Write attribute Internal_frequency related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void PiLC_PICOLAS::write_Internal_frequency(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PiLC_PICOLAS::write_Internal_frequency(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::write_Internal_frequency) ENABLED START -----*/
	PiLC_PICOLAS::frequency = w_val;
	Tango::DevLong	w_val_long;
	w_val_long = w_val * 10;
	const Tango::DevVarLongArray *out;
	Tango::DeviceData din, dout;
	Tango::DevVarLongArray *in = new Tango::DevVarLongArray();
	in->length(2);
	(*in)[0] = PiLC_PICOLAS::INTERNAL_FREQUENCY_REGISTER;
	(*in)[1] = w_val_long;
	din << in;
	try {
		dout = PiLC_PICOLAS::my_device->command_inout("WriteFPGA", din);
	}
	catch (...) {
		set_status("INTERNAL_FREQUENCY::could not send command");
	}
	//cout << "hello" << endl;
	dout.reset_exceptions(Tango::DeviceData::isempty_flag);
	if (!dout.is_empty()) {
		dout >> out;
		cout << "INTERNAL_FREQUENCY::received value from the device server: " << (*out)[0];
	}
	else {
		cout << "INTERNAL_FREQUENCY::no data read from device server" << endl;
	}
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::write_Internal_frequency
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void PiLC_PICOLAS::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : PiLC_PICOLAS::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void PiLC_PICOLAS::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(PiLC_PICOLAS::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::add_dynamic_commands
}

/*----- PROTECTED REGION ID(PiLC_PICOLAS::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::namespace_ending
} //	namespace
