/*----- PROTECTED REGION ID(PiLC_PICOLAS.h) ENABLED START -----*/
//=============================================================================
//
// file :        PiLC_PICOLAS.h
//
// description : Include file for the PiLC_PICOLAS class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PiLC_PICOLAS_H
#define PiLC_PICOLAS_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS.h

/**
 *  PiLC_PICOLAS class description:
 *    Class to control PiLC for Strobe lighting
 */

namespace PiLC_PICOLAS_ns
{
/*----- PROTECTED REGION ID(PiLC_PICOLAS::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::Additional Class Declarations

class PiLC_PICOLAS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PiLC_PICOLAS::Data Members) ENABLED START -----*/

//	Add your own data members
public:
	const int FREQUENCY_DIVIDER_REGISTER = 0x13;
	const int DELAY_REGISTER = 0x19;
	const int HIGH_TIME_REGISTER = 0x1B;
	const int INTERNAL_GENERATOR_ENABLE_REGISTER = 0x1D;
	const int INTERNAL_FREQUENCY_REGISTER = 0x1F;
	const int EXTERNAL_TRIGGER_ACTIVE_REGISTER = 0x18;
	double frequency;
	Tango::DeviceProxy *my_device;

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::Data Members

//	Device property data members
public:
	//	PiLCDevice:	Name of the PiLC tango device to connect to
	string	piLCDevice;

//	Attribute data members
public:
	Tango::DevShort	*attr_External_Trigger_Active_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PiLC_PICOLAS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PiLC_PICOLAS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PiLC_PICOLAS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~PiLC_PICOLAS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PiLC_PICOLAS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : PiLC_PICOLAS::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute External_Trigger_Active related methods
 *	Description: Incoming Signal 1, else 0.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_External_Trigger_Active(Tango::Attribute &attr);
	virtual bool is_External_Trigger_Active_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency_divider related methods
 *	Description: 
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void write_Frequency_divider(Tango::WAttribute &attr);
	virtual bool is_Frequency_divider_allowed(Tango::AttReqType type);
/**
 *	Attribute Delay related methods
 *	Description: Delay from the incoming signal to the output signal, ns
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void write_Delay(Tango::WAttribute &attr);
	virtual bool is_Delay_allowed(Tango::AttReqType type);
/**
 *	Attribute High_time related methods
 *	Description: High Time from the Output Signal, ns
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void write_High_time(Tango::WAttribute &attr);
	virtual bool is_High_time_allowed(Tango::AttReqType type);
/**
 *	Attribute Internal_Generator_Enable related methods
 *	Description: Internal Frequency generator. false = disable. true = enable
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void write_Internal_Generator_Enable(Tango::WAttribute &attr);
	virtual bool is_Internal_Generator_Enable_allowed(Tango::AttReqType type);
/**
 *	Attribute Internal_frequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void write_Internal_frequency(Tango::WAttribute &attr);
	virtual bool is_Internal_frequency_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PiLC_PICOLAS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : PiLC_PICOLAS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(PiLC_PICOLAS::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PiLC_PICOLAS::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PiLC_PICOLAS::Additional Classes Definitions

}	//	End of namespace

#endif   //	PiLC_PICOLAS_H
